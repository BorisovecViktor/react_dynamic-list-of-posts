{"version":3,"sources":["api/api.ts","components/User.tsx","components/Comment.tsx","components/PostCard.tsx","components/PostList.tsx","App.tsx","helpers/debounce.js","index.tsx"],"names":["getPosts","a","Promise","all","fetch","then","response","json","postsData","usersData","commentsData","map","post","postUser","find","user","id","userId","postComment","filter","comment","postId","User","name","email","address","className","city","street","zipcode","Comment","body","PostCard","title","key","PostList","posts","App","useState","setPosts","loading","setLoading","visibleSearchField","setvisibleSearchField","query","setQuery","filterQuery","setFilterQuery","preparePosts","toLocaleLowerCase","replace","includes","setFilterQueryWithDebounce","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","htmlFor","type","value","onChange","e","target","onClick","postsFromServer","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b660af02.chunk.js","sourcesContent":["const API__URL__POSTS = 'https://jsonplaceholder.typicode.com/posts';\nconst API__URL__USERS = 'https://jsonplaceholder.typicode.com/users';\nconst API__URL__COMMENTS = 'https://jsonplaceholder.typicode.com/comments';\n\nconst posts = () => {\n  return fetch(`${API__URL__POSTS}`)\n    .then(response => response.json());\n};\n\nconst users = () => {\n  return fetch(`${API__URL__USERS}`)\n    .then(response => response.json());\n};\n\nconst comments = () => {\n  return fetch(`${API__URL__COMMENTS}`)\n    .then(response => response.json());\n};\n\nexport const getPosts = async () => {\n  const [postsData, usersData, commentsData] = await Promise.all([posts(), users(), comments()]);\n\n  return postsData.map((post: PostFromServer) => {\n    const postUser = usersData.find((user: UserFromServer) => user.id === post.userId);\n    const postComment = commentsData\n      .filter((comment: CommentFromServer) => comment.postId === post.id);\n\n    return {\n      ...post, postUser, postComment,\n    };\n  });\n};\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  postUser: UserFromServer;\n};\n\nexport const User: React.FC<Props> = ({ postUser }) => {\n  const { name, email, address } = postUser;\n\n  return (\n    <>\n      <li className=\"user__item\">\n        <span className=\"user__name\">{name}</span>\n      </li>\n      <li className=\"user__item\">\n        <span className=\"user__email\">{email}</span>\n      </li>\n      <li className=\"user__item\">\n        <span className=\"user__city\">\n          {address.city}\n          ,\n        </span>\n        <span className=\"user__street\">\n          {address.street}\n          ,\n        </span>\n        <span className=\"user__zipcode\">{address.zipcode}</span>\n      </li>\n    </>\n  );\n};\n","import React from 'react';\nimport './Comment.css';\n\ntype Props = {\n  comment: CommentFromServer;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <p className=\"comment__user-name\">\n        {name}\n      </p>\n      <p className=\"comment__user-email\">\n        {email}\n      </p>\n      <p className=\"comment__user-text\">\n        {body}\n      </p>\n    </>\n  );\n};\n","import React from 'react';\nimport { User } from './User';\nimport { Comment } from './Comment';\nimport './PostCard.css';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostCard: React.FC<Props> = ({ post }) => {\n  const {\n    title, body, postUser, postComment,\n  } = post;\n\n  return (\n    <li className=\"post__item\">\n      <h2 className=\"post__title\">\n        {title}\n      </h2>\n      <ul className=\"post__user user\">\n        <User postUser={postUser} />\n      </ul>\n      <p className=\"post__text\">\n        {body}\n      </p>\n      <ul className=\"post__comment comment__list\">\n        {postComment.map(comment => (\n          <li className=\"comment__item\" key={comment.id}>\n            <Comment comment={comment} />\n          </li>\n        ))}\n      </ul>\n    </li>\n  );\n};\n","import React from 'react';\nimport './PostList.css';\n\nimport { PostCard } from './PostCard';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <>\n    <ul className=\"post__list\">\n      {posts.map(post => (\n        <PostCard post={post} key={post.id} />\n      ))}\n    </ul>\n  </>\n);\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\n\nimport { getPosts } from './api/api';\nimport { PostList } from './components/PostList';\nimport { debounce } from './helpers/debounce';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [visibleSearchField, setvisibleSearchField] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const handleGetPosts = () => {\n    setLoading(true);\n    setvisibleSearchField(true);\n    setTimeout(() => {\n      getPosts()\n        .then(postsFromServer => setPosts(postsFromServer))\n        .finally(() => {\n          setLoading(false);\n        });\n    }, 1000);\n  };\n\n  const preparePosts = posts.filter(({ title, body }) => (\n    (`${title} ${body}`)\n      .toLocaleLowerCase()\n      .replace(/\\s*/g, ' ')\n      .includes(filterQuery.toLocaleLowerCase().replace(/\\s*/g, ' '))\n  ));\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 1000), [],\n  );\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    setFilterQueryWithDebounce(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"post__header\">Dynamic list of posts</h1>\n      {\n        visibleSearchField\n          ? (\n            <div className=\"post__search-field\">\n              <label htmlFor=\"search\">\n                Filter Posts\n                <input\n                  type=\"text\"\n                  id=\"search\"\n                  value={query}\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n          )\n          : <button type=\"button\" className=\"post__button\" onClick={handleGetPosts}>Load Posts</button>\n      }\n      {\n        loading\n          ? (\n            <div className=\"lds-ellipsis\">\n              <div />\n              <div />\n              <div />\n              <div />\n            </div>\n          )\n          : <PostList posts={preparePosts} />\n      }\n    </div>\n  );\n};\n\nexport default App;\n","export const debounce = (f, delay) => {\n  let timerId;\n\n  const debounced = (...args) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n\n  return debounced;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}